{"version":3,"sources":["types/index.ts","components/App/NumberDisplay/index.tsx","utils/index.ts","constans/index.ts","components/App/Button/index.tsx","components/App/index.tsx","index.tsx"],"names":["CellValue","CellState","Face","NumberDisplay","value","className","toString","padStart","grabAllCellsFunction","cells","rowIndex","colIndex","topLeft","MAX_ROWS","MAX_COLS","top","topRight","right","bottomRight","bottom","bottomLeft","left","generateCells","row","push","col","none","state","open","bombsPlaced","randomRow","Math","floor","random","randomCol","bomb","cellsCaptured","map","rowIdx","cell","colIdx","splice","length","currentCell","numberOfBombs","noneGrids","cellsCopy","slice","flagged","visible","x","y","Button","red","onClick","onContext","onContextMenu","role","aria-label","App","useState","setCells","smile","face","setFace","time","setTime","live","setLive","bombcounter","setBombCounter","hasLost","setHasLost","hasWon","setHasWon","handleCellClick","rowParams","colParams","newCells","smile3","isBomb","safeOpenCellsExists","handleCellContex","event","preventDefault","currentCellCopy","useEffect","smile4","handleMouseDownClick","smile2","handleMouseUp","window","addEventListener","removeEventListener","timing","setInterval","clearInterval","cellIdx","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5aaf2346.chunk.js","sourcesContent":["export enum CellValue {\r\n  none, one, two, three, four, five, six, seven, eight, bomb\r\n}\r\n\r\nexport enum CellState {\r\n  open, visible, flagged\r\n}\r\n\r\nexport type Cell = { value: CellValue, state: CellState; red?: boolean}\r\n\r\nexport enum Face{\r\n  smile= 'ðŸ˜ƒ',\r\n  smile2='ðŸ˜†',\r\n  smile3='ðŸ˜‘',\r\n  smile4='ðŸ˜Š'\r\n}","import React from \"react\";\r\nimport \"./numberDisplay.scss\";\r\n\r\ninterface NumberDisplayProps {\r\n  value: number;\r\n}\r\n\r\nconst NumberDisplay: React.FC<NumberDisplayProps> = ({ value }) => {\r\n  return (\r\n    <div className=\"display-wrapper\">{value.toString().padStart(3, \"0\")}</div>\r\n  );\r\n};\r\n\r\nexport default NumberDisplay;\r\n","import { MAX_ROWS, MAX_COLS, NUMB_OF_BOMBS } from \"../constans\";\r\nimport { CellValue, CellState, Cell } from \"../types\";\r\n\r\n\r\n\r\nconst grabAllCellsFunction = (cells: Cell[][],\r\n  rowIndex: number,\r\n  colIndex: number): {\r\n    topLeft: Cell | null;\r\n    top: Cell | null;\r\n    topRight: Cell | null;\r\n    left: Cell | null;\r\n    right: Cell | null;\r\n    bottomLeft: Cell | null;\r\n    bottom: Cell | null;\r\n    bottomRight: Cell | null;\r\n  } => {\r\n  const topLeft = rowIndex < MAX_ROWS - 1 && colIndex < MAX_COLS - 1 ? cells[rowIndex + 1][colIndex + 1] : null;\r\n  const top = rowIndex < MAX_ROWS - 1 ? cells[rowIndex + 1][colIndex] : null;\r\n  const topRight = rowIndex < MAX_ROWS - 1 && colIndex > 0 ? cells[rowIndex + 1][colIndex - 1] : null;\r\n  const right = colIndex > 0 ? cells[rowIndex][colIndex - 1] : null;\r\n  const bottomRight = rowIndex > 0 && colIndex > 0 ? cells[rowIndex - 1][colIndex - 1] : null;\r\n  const bottom = rowIndex > 0 ? cells[rowIndex - 1][colIndex] : null;\r\n  const bottomLeft = rowIndex > 0 && colIndex < MAX_COLS - 1 ? cells[rowIndex - 1][colIndex + 1] : null;\r\n  const left = colIndex < MAX_COLS - 1 ? cells[rowIndex][colIndex + 1] : null;\r\n\r\n  return {\r\n    topLeft,\r\n    top,\r\n    topRight,\r\n    left,\r\n    right,\r\n    bottomLeft,\r\n    bottom,\r\n    bottomRight\r\n  };\r\n};\r\n\r\nexport const generateCells = (): Cell[][] => {\r\n  const cells: Cell[][] = [];\r\n  //generating all cells\r\n  for (let row = 0; row < MAX_ROWS; row++) {\r\n    cells.push([]);\r\n    for (let col = 0; col < MAX_COLS; col++) {\r\n      cells[row].push({\r\n        value: CellValue.none,\r\n        state: CellState.open\r\n      });\r\n    }\r\n  }\r\n\r\n  //put bombs\r\n  let bombsPlaced = 0;\r\n  while (bombsPlaced < NUMB_OF_BOMBS) {\r\n    const randomRow = Math.floor(Math.random() * MAX_ROWS);\r\n    const randomCol = Math.floor(Math.random() * MAX_COLS);\r\n    const currentCell = cells[randomRow][randomCol];\r\n    if (currentCell.value !== CellValue.bomb) {\r\n      const cellsCaptured = cells.map((row, rowIdx) => row.map((cell, colIdx) => {\r\n        if (randomRow === rowIdx && randomCol === colIdx) {\r\n          return {\r\n            ...cell, value: CellValue.bomb\r\n          };\r\n        } else {\r\n          return cell;\r\n        }\r\n      }));\r\n      cells.splice(0, cells.length, ...cellsCaptured);\r\n      bombsPlaced++;\r\n    }\r\n\r\n  }\r\n  //calculate numbers\r\n  for (let rowIndex = 0; rowIndex < MAX_ROWS; rowIndex++) {\r\n    for (let colIndex = 0; colIndex < MAX_COLS; colIndex++) {\r\n      const currentCell = cells[rowIndex][colIndex];\r\n      if (currentCell.value === CellValue.bomb) {\r\n        continue;\r\n      }\r\n      let numberOfBombs = 0;\r\n      const {\r\n        topLeft,\r\n        top,\r\n        topRight,\r\n        left,\r\n        right,\r\n        bottomLeft,\r\n        bottom,\r\n        bottomRight\r\n      } = grabAllCellsFunction(cells, rowIndex, colIndex);\r\n\r\n\r\n      if (topLeft?.value === CellValue.bomb) {\r\n        numberOfBombs++;\r\n      }\r\n      if (topRight?.value === CellValue.bomb) {\r\n        numberOfBombs++;\r\n      }\r\n      if (top?.value === CellValue.bomb) {\r\n        numberOfBombs++;\r\n      }\r\n      if (right?.value === CellValue.bomb) {\r\n        numberOfBombs++;\r\n      }\r\n      if (bottomRight?.value === CellValue.bomb) {\r\n        numberOfBombs++;\r\n      }\r\n      if (bottom?.value === CellValue.bomb) {\r\n        numberOfBombs++;\r\n      }\r\n      if (bottomLeft?.value === CellValue.bomb) {\r\n        numberOfBombs++;\r\n      }\r\n      if (left?.value === CellValue.bomb) {\r\n        numberOfBombs++;\r\n      }\r\n\r\n\r\n\r\n      if (numberOfBombs > 0) {\r\n        cells[rowIndex][colIndex] = {\r\n          ...currentCell, value: numberOfBombs\r\n        };\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  return cells;\r\n};\r\n\r\nexport const openNonePiecesCells = (cells: Cell[][], rowIndex: number, colIndex: number): Cell[][] => {\r\n  const currentCell = cells[rowIndex][colIndex];\r\n\r\n  if (currentCell.state = CellState.visible || currentCell.state === CellState.flagged) {\r\n    return cells;\r\n  }\r\n  let newCells = cells.slice();\r\n\r\n  newCells[rowIndex][colIndex].state = CellState.visible;\r\n\r\n  const {\r\n    topLeft,\r\n    top,\r\n    topRight,\r\n    left,\r\n    right,\r\n    bottomLeft,\r\n    bottom,\r\n    bottomRight\r\n  } = grabAllCellsFunction(cells, rowIndex, colIndex);\r\n\r\n  if (\r\n    topLeft?.state === CellState.open &&\r\n    topLeft.value !== CellValue.bomb\r\n  ) {\r\n    if (topLeft.value === CellValue.none) {\r\n      newCells = openNonePiecesCells(newCells, rowIndex + 1, colIndex + 1);\r\n    } else {\r\n      newCells[rowIndex + 1][colIndex + 1].state = CellState.visible;\r\n    }\r\n  }\r\n\r\n  if (top?.state === CellState.open && top.value !== CellValue.bomb) {\r\n    if (top.value === CellValue.none) {\r\n      newCells = openNonePiecesCells(newCells, rowIndex - 1, colIndex);\r\n    } else {\r\n      newCells[rowIndex + 1][colIndex].state = CellState.visible;\r\n    }\r\n  }\r\n\r\n  if (\r\n    topRight?.state === CellState.open &&\r\n    topRight.value !== CellValue.bomb\r\n  ) {\r\n    if (topRight.value === CellValue.none) {\r\n      newCells = openNonePiecesCells(newCells, rowIndex + 1, colIndex - 1);\r\n    } else {\r\n      newCells[rowIndex + 1][colIndex - 1].state = CellState.visible;\r\n    }\r\n  }\r\n\r\n  if (left?.state === CellState.open && left.value !== CellValue.bomb) {\r\n    if (left.value === CellValue.none) {\r\n      newCells = openNonePiecesCells(newCells, rowIndex, colIndex - 1);\r\n    } else {\r\n      newCells[rowIndex][colIndex + 1].state = CellState.visible;\r\n    }\r\n  }\r\n\r\n  if (\r\n    right?.state === CellState.open &&\r\n    right.value !== CellValue.bomb\r\n  ) {\r\n    if (right.value === CellValue.none) {\r\n      newCells = openNonePiecesCells(newCells, rowIndex, colIndex + 1);\r\n    } else {\r\n      newCells[rowIndex][colIndex - 1].state = CellState.visible;\r\n    }\r\n  }\r\n\r\n  if (\r\n    bottomLeft?.state === CellState.open &&\r\n    bottomLeft.value !== CellValue.bomb\r\n  ) {\r\n    if (bottomLeft.value === CellValue.none) {\r\n      newCells = openNonePiecesCells(newCells, rowIndex + 1, colIndex - 1);\r\n    } else {\r\n      newCells[rowIndex - 1][colIndex + 1].state = CellState.visible;\r\n    }\r\n  }\r\n\r\n  if (\r\n    bottom?.state === CellState.open &&\r\n    bottom.value !== CellValue.bomb\r\n  ) {\r\n    if (bottom.value === CellValue.none) {\r\n      newCells = openNonePiecesCells(newCells, rowIndex + 1, colIndex);\r\n    } else {\r\n      newCells[rowIndex - 1][colIndex].state = CellState.visible;\r\n    }\r\n  }\r\n\r\n  if (\r\n    bottomRight?.state === CellState.open &&\r\n    bottomRight.value !== CellValue.bomb\r\n  ) {\r\n    if (bottomRight.value === CellValue.none) {\r\n\r\n      newCells = openNonePiecesCells(newCells, rowIndex - 1, colIndex - 1);\r\n    } else {\r\n      newCells[rowIndex - 1][colIndex - 1].state = CellState.visible;\r\n    }\r\n  }\r\n\r\n  return newCells;\r\n};\r\n\r\nexport const noneGrids = (cells: Cell[][], rowIdx: number, colIdx: number,): Cell[][] => {\r\n  const currentCell = cells[rowIdx][colIdx];\r\n  const cellsCopy = cells.slice();\r\n  if (currentCell.value !== CellValue.bomb || currentCell.state !== CellState.flagged) {\r\n    if (currentCell.value === CellValue.none && currentCell.state === CellState.open) {\r\n      cellsCopy[rowIdx][colIdx].state = CellState.visible;\r\n      for (let x = -1; x <= 1; x++) {\r\n        for (let y = -1; y <= 1; y++) {\r\n\r\n          const roX = (rowIdx + x) >= 0 && (rowIdx + x) < MAX_COLS;\r\n          const coY = (colIdx + y) >= 0 && (colIdx + y) < MAX_ROWS;\r\n\r\n          if (roX && coY) {\r\n\r\n            if (cellsCopy[rowIdx + x][colIdx + y]?.value === CellValue.none) {\r\n              noneGrids(cellsCopy, (rowIdx + x), (colIdx + y));\r\n            } else {\r\n\r\n              cellsCopy[rowIdx + x][colIdx + y].state = CellState.visible;\r\n            }\r\n          }\r\n\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return cellsCopy;\r\n};\r\n\r\n","export const MAX_ROWS = 9;\r\nexport const MAX_COLS = 9;\r\nexport const NUMB_OF_BOMBS = 10;\r\n","import React from \"react\";\r\nimport {  CellState, CellValue } from \"../../../types\";\r\nimport \"./button.scss\";\r\n\r\ninterface ButtonProps {\r\n  rowIndex: number;\r\n  colIndex: number;\r\n  state: CellState;\r\n  value: CellValue;\r\n  red?: boolean\r\n  onClick(rowIndex: number, colIndex: number):(...args: any[]) => void;\r\n  onContext(rowIndex: number, colIndex: number):(...args: any[]) => void;\r\n}\r\n\r\nconst Button: React.FC<ButtonProps> = ({\r\n  rowIndex,\r\n  colIndex,\r\n  red,\r\n  onClick,\r\n  onContext,\r\n  state,\r\n  value,\r\n}) => {\r\n  const renderContent = (): React.ReactNode => {\r\n    if (state === CellState.visible) {\r\n      if (value === CellValue.bomb) {\r\n        return (\r\n          <span role=\"img\" aria-label=\"face\">\r\n            ðŸ’£\r\n          </span>\r\n        );\r\n      }else if(value === CellValue.none){\r\n        return null;\r\n      }\r\n      return value;\r\n    } else if (state === CellState.flagged) {\r\n      return (\r\n        <span role=\"img\" aria-label=\"face\">\r\n          ðŸš©\r\n        </span>\r\n      );\r\n    }\r\n    return null;\r\n  };\r\n  return (\r\n    <div\r\n      className={`button-wrapper ${\r\n        state === CellState.visible ? \"visible\" : \"\"\r\n      } value-${value} ${red ? 'red': null}`}\r\n      onClick={onClick(rowIndex,colIndex)}\r\n      onContextMenu={onContext(rowIndex,colIndex)}\r\n    >\r\n      {renderContent()}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport NumberDisplay from \"./NumberDisplay\";\r\nimport { generateCells,noneGrids } from \"../../utils\";\r\nimport Button from \"./Button\";\r\nimport { Face, Cell, CellState, CellValue } from \"../../types/index\";\r\nimport {MAX_ROWS, MAX_COLS,NUMB_OF_BOMBS} from \"../../constans\"\r\nimport \"./App.scss\";\r\n\r\nconst App: React.FC = () => {\r\n  const [cells, setCells] = useState<Cell[][]>(generateCells());\r\n  const [face, setFace] = useState<Face>(Face.smile);\r\n  const [time, setTime] = useState<number>(0);\r\n  const [live, setLive] = useState<boolean>(false);\r\n  const [bombcounter, setBombCounter] = useState<number>(NUMB_OF_BOMBS);\r\n  const [hasLost, setHasLost] = useState<boolean>(false);\r\n  const [hasWon, setHasWon] = useState<boolean>(false);\r\n\r\n  const showAllBombs = (): Cell[][] => {\r\n    const currentCells = cells.slice();\r\n    return currentCells.map(row =>\r\n      row.map(cell => {\r\n        if (cell.value === CellValue.bomb) {\r\n          return {\r\n            ...cell,\r\n            state: CellState.visible\r\n          };\r\n        }\r\n\r\n        return cell;\r\n      })\r\n    );\r\n  };\r\n\r\n  const handleCellClick = (\r\n    rowParams: number,\r\n    colParams: number\r\n  ) => (): void => {\r\n    let newCells = cells.slice();\r\n   if(hasLost){\r\n     setFace(Face.smile3)\r\n     return\r\n   }\r\n    if (!live) {\r\n      let isBomb = newCells[rowParams][colParams].value === CellValue.bomb;\r\n      while (isBomb) {\r\n        newCells = generateCells();\r\n        if (newCells[rowParams][colParams].value != CellValue.bomb) {\r\n          isBomb = false;\r\n          break;\r\n        }\r\n      }\r\n      setLive(true);\r\n    }\r\n    const currentCell = newCells[rowParams][colParams];\r\n\r\n    if (\r\n      currentCell.state === CellState.flagged ||\r\n      currentCell.state === CellState.visible\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    if (currentCell.value === CellValue.bomb) {\r\n      setHasLost(true)\r\n      newCells[rowParams][colParams].red = true\r\n      newCells = showAllBombs()\r\n      setCells(newCells)\r\n      return\r\n    } else if (currentCell.value === CellValue.none) {\r\n      //newCells = openNonePiecesCells(newCells, rowParams, colParams);\r\n      newCells = noneGrids(newCells, rowParams, colParams)\r\n    } else {\r\n      newCells[rowParams][colParams].state = CellState.visible;\r\n      \r\n    }\r\n\r\n    let safeOpenCellsExists = false;\r\n    for (let row = 0; row < MAX_ROWS; row++) {\r\n      for (let col = 0; col < MAX_COLS; col++) {\r\n        const currentCell = newCells[row][col];\r\n\r\n        if (\r\n          currentCell.value !== CellValue.bomb &&\r\n          currentCell.state === CellState.open\r\n        ) {\r\n          safeOpenCellsExists = true;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (!safeOpenCellsExists) {\r\n      newCells = newCells.map(row =>\r\n        row.map(cell => {\r\n          if (cell.value === CellValue.bomb) {\r\n            return {\r\n              ...cell,\r\n              state: CellState.flagged\r\n            };\r\n          }\r\n          return cell;\r\n        })\r\n      );\r\n      setHasWon(true);\r\n    }\r\n\r\n    setCells(newCells)\r\n  };\r\n\r\n  const handleCellContex = (rowParams: number, colParams: number) => (\r\n    event: React.MouseEvent<HTMLDivElement, MouseEvent>\r\n  ): void => {\r\n    event.preventDefault();\r\n    \r\n    if(hasLost || !live){\r\n      setFace(Face.smile3)\r\n      return\r\n    }\r\n    \r\n    const currentCellCopy = cells.slice();\r\n    const currentCell = cells[rowParams][colParams];\r\n    if (currentCell.state === CellState.visible) {\r\n      return;\r\n    } else if (currentCell.state === CellState.open && bombcounter > 0) {\r\n      currentCellCopy[rowParams][colParams].state = CellState.flagged;\r\n      setCells(currentCellCopy);\r\n      setBombCounter(bombcounter - 1);\r\n    } else if (currentCell.state === CellState.flagged) {\r\n      currentCellCopy[rowParams][colParams].state = CellState.open;\r\n      setCells(currentCellCopy);\r\n      setBombCounter(bombcounter + 1);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    if(hasLost) {\r\n      setFace(Face.smile3)\r\n      setLive(false)\r\n    }\r\n    \r\n  },[hasLost])\r\n\r\n  useEffect(() => {\r\n    if(hasWon){\r\n      setLive(false)\r\n      setFace(Face.smile4)\r\n    }\r\n  },[hasWon])\r\n\r\n  useEffect(() => {\r\n    const handleMouseDownClick = (): void => {\r\n      setFace(Face.smile2);\r\n    };\r\n    const handleMouseUp = (): void => {\r\n      setFace(Face.smile);\r\n    };\r\n    window.addEventListener(\"mousedown\", handleMouseDownClick);\r\n    window.addEventListener(\"mouseup\", handleMouseUp);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"mousedown\", handleMouseDownClick);\r\n      window.removeEventListener(\"mouseup\", handleMouseUp);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (live && time < 999) {\r\n      const timing = setInterval(() => {\r\n        setTime(time + 1);\r\n      }, 1000);\r\n      return () => {\r\n        return clearInterval(timing);\r\n      };\r\n    }\r\n  }, [time, live]);\r\n\r\n  const onFaceClick = (): void => {\r\n    \r\n      setLive(false);\r\n      setTime(0);\r\n      setBombCounter(NUMB_OF_BOMBS)\r\n      \r\n      setHasLost(false);\r\n      setHasWon(false)\r\n      setCells(generateCells());\r\n    \r\n  };\r\n  const renderCells = (): React.ReactNode => {\r\n    return cells.map((row, rowIdx) =>\r\n      row.map((cell, cellIdx) => (\r\n        <Button\r\n          key={`${rowIdx}__${cellIdx}`}\r\n          state={cell.state}\r\n          onClick={handleCellClick}\r\n          onContext={handleCellContex}\r\n          value={cell.value}\r\n          red={cell.red}\r\n          rowIndex={rowIdx}\r\n          colIndex={cellIdx}\r\n        />\r\n      ))\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"app-wrapper\">\r\n      <div className=\"header\">\r\n        <NumberDisplay value={bombcounter} />\r\n        <div className=\"face\"  onClick={onFaceClick}>\r\n          <span role=\"img\" aria-label=\"face\">\r\n            {face}\r\n          </span>\r\n        </div>\r\n        <NumberDisplay value={time} />\r\n      </div>\r\n      <div className=\"body-side\">{renderCells()}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport './index.scss';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}